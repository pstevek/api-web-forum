import httpx
import random
from sqlalchemy.exc import IntegrityError
from app.api import models
from app.core.database import engine, use_database_session
from app.core.config import settings
from app.core.helpers import slugify_string
from app.core.logger import logger
from datetime import datetime
from passlib.context import CryptContext


pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')

tables = {
    'roles': [
        models.Role(
            slug="moderator",
            name="Moderator",
            created_at=datetime.now()
        ),
        models.Role(
            slug="regular",
            name="Regular",
            created_at=datetime.now()
        )
    ],
    'users': [
        models.User(
            email="admin@gmail.com",
            first_name="Admin",
            last_name="User",
            username="admin",
            password=pwd_context.hash("admin"),
            role_id=1,
            created_at=datetime.now(),
        ),
        models.User(
            email="steve.kamanke@gmail.com",
            first_name="Steve",
            last_name="Kamanke",
            username="pstevek",
            password=pwd_context.hash('password'),
            role_id=2,
            created_at=datetime.now(),
        ),
        models.User(
            email="user@forum.co.za",
            first_name="Test",
            last_name="User",
            username="test.user",
            password=pwd_context.hash('password'),
            role_id=2,
            created_at=datetime.now(),
        ),
    ],
    'posts': [],
    'comments': [],
    'likes': []
}


def run_seeder(db_tables: list) -> None:
    logger.info("Dropping all tables")
    models.Base.metadata.drop_all(bind=engine)
    logger.info("Creating all tables")
    models.Base.metadata.create_all(bind=engine)
    for table in db_tables:
        try:
            with use_database_session() as session:
                logger.info("Seeding data ...")
                session.bulk_save_objects(objects=tables[table])
                session.commit()
                logger.info("Seeding completed")
        except IntegrityError:
            logger.error("Duplicate transaction detected. Seeder likely ran already")


if __name__ == "__main__":
    _api_posts_endpoint = settings.SAMPLE_POSTS_API
    _api_users_endpoint = settings.SAMPLE_USERS_API

    USER_COUNT: int = 10
    POST_COUNT: int = 50

    try:
        _api_posts = httpx.get(f"{_api_posts_endpoint}?limit={POST_COUNT}")
        _api_users = httpx.get(f"{_api_users_endpoint}?limit={USER_COUNT}")

        _api_users.raise_for_status()
        users = _api_users.json()['users']
        for i in range(0, USER_COUNT):
            tables['users'].append(
                models.User(
                    email=users[i]['email'],
                    first_name=users[i]['first_name'],
                    last_name=users[i]['last_name'],
                    username=f"{users[i]['first_name']}.{users[i]['last_name']}".lower(),
                    password=pwd_context.hash('password'),
                    role_id=2,
                    created_at=datetime.now(),
                )
            )

        _api_posts.raise_for_status()
        blogs = _api_posts.json()['blogs']
        for i in range(0, POST_COUNT):
            title: str = blogs[i]['title']
            tables['posts'].append(
                models.Post(
                    user_id=random.randint(2, USER_COUNT),
                    title=title,
                    slug=slugify_string(title),
                    content=blogs[i]['content_html']
                )
            )

        for _ in range(0, 50):
            tables['likes'].append(
                models.Like(
                    user_id=random.randint(2, USER_COUNT),
                    post_id=random.randint(1, POST_COUNT)
                )
            )

        for i in range(0, 50):
            tables['comments'].append(
                models.Comment(
                    user_id=random.randint(2, USER_COUNT),
                    post_id=random.randint(1, POST_COUNT),
                    content=f"Autogenerated comment #{i}"
                )
            )
    except httpx.RequestError as exc:
        print(f"An error occurred while requesting {exc.request.url!r}.")
    except httpx.HTTPStatusError as exc:
        print(f"Error response {exc.response.status_code} while requesting {exc.request.url!r}.")

    run_seeder([*tables])
